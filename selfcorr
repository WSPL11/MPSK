// パッケージ名は build.gradle.kts と一致していることを確認
package com.example.geminichannelsound

import android.Manifest
import android.content.pm.PackageManager
import android.media.AudioFormat
import android.media.AudioRecord
import android.media.MediaRecorder
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.* // Material 3 を使用
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat
// ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
// ★ テーマの import を一旦コメントアウト。ui.theme パッケージとテーマファイルを確認してください。
// ★ もし ui.theme パッケージが存在しない場合、この import は不要です。
// ★ 代わりに MaterialTheme を直接使用します。
// ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
// import com.example.geminichannelsound.ui.theme.YourAppNameTheme // ← エラーが出ていたのでコメントアウト

import kotlinx.coroutines.*
// JTransforms の import (build.gradle に依存関係を追加し、Sync後に解決されるはず)
import org.jtransforms.fft.FloatFFT_1D
import kotlin.math.abs
import kotlin.math.ceil
import kotlin.math.log2
import kotlin.math.pow
import kotlin.math.sqrt

// --- 定数定義 ---
private const val TAG = "CrossCorrelationApp"
private const val SAMPLE_RATE = 44100
private const val CHANNEL_CONFIG = AudioFormat.CHANNEL_IN_MONO
private const val AUDIO_FORMAT = AudioFormat.ENCODING_PCM_16BIT
private const val RECORDING_TIME_MS = 1000
private const val IMPULSE_PERIOD = 1023
private const val IMPULSE_AMPLITUDE = 16384.0f
private val FFT_SIZE = 2.0.pow(ceil(log2((SAMPLE_RATE * RECORDING_TIME_MS / 1000).toDouble()))).toInt() * 2

// --- Activity ---
class MainActivity : ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContent {
            // ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
            // ★ カスタムテーマの代わりにデフォルトの MaterialTheme を使用します。
            // ★ プロジェクトに合わせたテーマを適用したい場合は、
            // ★ ui.theme パッケージ内のテーマファイルを確認し、
            // ★ 上記の import とここの呼び出しを修正してください。
            // ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
            MaterialTheme { // ← YourAppNameTheme の代わりに MaterialTheme を使用
                CorrelationScreen()
            }
        }
    }
}

// --- UI (Jetpack Compose) ---
@Composable
fun CorrelationScreen() {
    // (中身は変更なし、ただし MaterialTheme が適用される)
    val context = LocalContext.current
    var hasRecordPermission by remember { mutableStateOf(false) }
    var isProcessing by remember { mutableStateOf(false) }
    var resultText by remember { mutableStateOf("ボタンを押して処理を開始") }
    val coroutineScope = rememberCoroutineScope()
    val scrollState = rememberScrollState()

    val permissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission(),
        onResult = { isGranted ->
            hasRecordPermission = isGranted
            if (!isGranted) {
                Log.w(TAG, "マイクの使用が許可されませんでした")
                resultText = "マイクのパーミッションが必要です。アプリ設定から許可してください。"
            } else {
                resultText = "マイク使用可能。ボタンを押して処理を開始"
            }
        }
    )

    LaunchedEffect(Unit) {
        when (ContextCompat.checkSelfPermission(context, Manifest.permission.RECORD_AUDIO)) {
            PackageManager.PERMISSION_GRANTED -> {
                hasRecordPermission = true
                resultText = "マイク使用可能。ボタンを押して処理を開始"
            }
            else -> {
                permissionLauncher.launch(Manifest.permission.RECORD_AUDIO)
            }
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(8.dp) // ボタン間のスペースを少し調整
    ) { // --- 録音実行ボタン ---
        Button(
            onClick = {
                if (hasRecordPermission && !isProcessing) {
                    coroutineScope.launch {
                        isProcessing = true
                        resultText = "処理を開始します...\n1. 録音中..."
                        Log.d(TAG, "処理開始: 録音")
                        val recordedAudio = recordAudio(FFT_SIZE)
                        if (recordedAudio == null) {
                            // ... エラー処理 ...
                            isProcessing = false
                            return@launch
                        }
                        resultText += "\n録音完了 (${recordedAudio.size} samples)"
                        // ... (インパルス列生成、相互相関計算、正規化、結果表示は共通化可能だが、一旦そのまま)
                        resultText += "\n2. インパルス列生成中..."
                        val impulseTrainRef = generateImpulseTrain(FFT_SIZE) // 参照信号
                        resultText += "\nインパルス列生成完了"
                        resultText += "\n3. 相互相関計算中 (FFT)..."
                        val correlationResult = calculateCrossCorrelationFFT(recordedAudio, impulseTrainRef) // ★ 録音データを使用
                        if (correlationResult == null) {
                            // ... エラー処理 ...
                            isProcessing = false
                            return@launch
                        }
                        resultText += "\n相互相関計算完了"
                        resultText += "\n4. 正規化中..."
                        val normalizedCorrelation = normalizeCorrelation(correlationResult)
                        resultText += "\n正規化完了"
                        resultText += "\n5. 結果表示準備中..."
                        val formattedResult = formatCorrelationResult(normalizedCorrelation)
                        resultText = formattedResult
                        Log.d(TAG, "録音モード 処理完了")
                        isProcessing = false
                    }
                } else if (isProcessing) {
                    // 処理中
                } else {
                    resultText = "マイクのパーミッションが必要です。許可してください。"
                    permissionLauncher.launch(Manifest.permission.RECORD_AUDIO)
                }
            },
            // パーミッションがあり、処理中でない場合のみ有効
            enabled = hasRecordPermission && !isProcessing,
            modifier = Modifier.fillMaxWidth() // 幅を合わせる
        ) {
            Text("録音して相互相関計算")
        }
        // --- テストモード実行ボタン ---
        Button(
            onClick = {
                if (!isProcessing) { // 処理中でなければ実行
                    coroutineScope.launch {
                        isProcessing = true
                        resultText = "テストモード実行中...\n1. テスト信号生成中..."
                        Log.d(TAG, "テストモード開始: 信号生成")

                        // 1. テスト入力信号 (インパルス列 Short版) を生成
                        val testInputSignal = generateImpulseTrainShort(FFT_SIZE) // ★ ShortArray版
                        resultText += "\nテスト信号生成完了 (${testInputSignal.size} samples)"

                        // 2. 参照信号 (インパルス列 Float版) を生成
                        resultText += "\n2. 参照インパルス列生成中..."
                        val impulseTrainRef = generateImpulseTrain(FFT_SIZE) // ★ FloatArray版 (既存関数)
                        resultText += "\n参照インパルス列生成完了"

                        // 3. 自己相関を計算 (FFTを使用)
                        resultText += "\n3. 自己相関計算中 (FFT)..."
                        // ★ テスト信号(Short)と参照信号(Float)で計算
                        val correlationResult = calculateCrossCorrelationFFT(testInputSignal, impulseTrainRef)

                        if (correlationResult == null) {
                            resultText = "エラー: テストモードでの相関計算に失敗しました。"
                            Log.e(TAG, "テストモード: 相関計算失敗")
                            isProcessing = false
                            return@launch
                        }
                        resultText += "\n自己相関計算完了"

                        // 4. 結果を正規化
                        resultText += "\n4. 正規化中..."
                        val normalizedCorrelation = normalizeCorrelation(correlationResult)
                        resultText += "\n正規化完了"

                        // 5. 結果を表示用に整形
                        resultText += "\n5. 結果表示準備中..."
                        val formattedResult = formatCorrelationResult(normalizedCorrelation)
                        // 結果の期待値に関する注釈を追加
                        resultText = "--- テストモード結果 ---\n" +
                                "(入力と参照が同じインパルス列なので自己相関です)\n" +
                                formattedResult +
                                "\n★期待値: ピーク位置(サンプル遅延)=0, ピーク値=1.0"

                        Log.d(TAG, "テストモード 処理完了")
                        isProcessing = false
                    }
                }
            },
            // 処理中でない場合のみ有効
            enabled = !isProcessing,
            modifier = Modifier.fillMaxWidth() // 幅を合わせる
        ) {
            Text("テストモード実行 (自己相関)")
        }

        // --- 結果表示エリア ---
        Surface(
            modifier = Modifier
                .fillMaxWidth()
                .weight(1f),
            border = ButtonDefaults.outlinedButtonBorder
        ) {
            Text(
                text = resultText,
                modifier = Modifier
                    .padding(8.dp)
                    .verticalScroll(scrollState)
            )
        }
    }
}


// --- 音声処理・計算関連の関数 ---
// (recordAudio, generateImpulseTrain, calculateCrossCorrelationFFT, normalizeCorrelation, formatCorrelationResult 関数は変更なし)
// ... (省略された関数のコードをここに含める)
/**
 * AudioRecordを使用してマイクから指定サンプル数録音する関数。
 * @param targetSamples 録音する目標サンプル数。
 * @return 録音された音声データ(ShortArray)、失敗した場合はnull。
 */
private suspend fun recordAudio(targetSamples: Int): ShortArray? = withContext(Dispatchers.IO) {
    Log.d(TAG, "recordAudio: 開始 targetSamples=$targetSamples")
    // 最小バッファサイズを取得
    // AudioRecord.getMinBufferSize は非推奨になる可能性があるため、代替手段も考慮 (今回はそのまま)
    val minBufferSize = AudioRecord.getMinBufferSize(SAMPLE_RATE, CHANNEL_CONFIG, AUDIO_FORMAT)
    if (minBufferSize == AudioRecord.ERROR_BAD_VALUE || minBufferSize == AudioRecord.ERROR) {
        Log.e(TAG, "recordAudio: AudioRecordのバッファサイズ取得に失敗 minBufferSize=$minBufferSize")
        return@withContext null
    }

    // 読み取りバッファサイズを設定 (最小バッファサイズより大きく、ターゲットサイズも考慮)
    // 十分な大きさがないと read がブロックしたり、データを取りこぼす可能性がある
    val bufferSize = maxOf(minBufferSize, targetSamples) * 2 // 余裕を持たせる

    var audioRecord: AudioRecord? = null
    try {
        Log.d(TAG, "recordAudio: AudioRecord初期化試行 bufferSize=$bufferSize")
        // パーミッションは呼び出し元で確認済みとする
        // APIレベルによっては AudioRecord.Builder を使う方が推奨される
        audioRecord = AudioRecord(
            MediaRecorder.AudioSource.MIC,
            SAMPLE_RATE,
            CHANNEL_CONFIG,
            AUDIO_FORMAT,
            bufferSize
        )

        // 初期化状態を確認
        if (audioRecord.state != AudioRecord.STATE_INITIALIZED) {
            Log.e(TAG, "recordAudio: AudioRecordの初期化に失敗 state=${audioRecord.state}")
            // AudioRecord.getState() で詳細な状態を確認できる場合がある
            return@withContext null
        }
        Log.d(TAG, "recordAudio: AudioRecord初期化成功")

        // 録音データを格納する配列
        val audioData = ShortArray(targetSamples)
        var totalSamplesRead = 0

        // 録音開始
        audioRecord.startRecording()
        // audioRecord.recordingState == AudioRecord.RECORDSTATE_RECORDING であることを確認するとより堅牢
        Log.d(TAG, "recordAudio: 録音開始")

        // 目標サンプル数に達するか、コルーチンがキャンセルされるまで読み込み続ける
        while (totalSamplesRead < targetSamples && currentCoroutineContext().isActive) {
            // バッファからデータを読み込む
            // read() はブロッキング呼び出しになる可能性がある
            val readResult = audioRecord.read(audioData, totalSamplesRead, targetSamples - totalSamplesRead)

            if (readResult > 0) {
                // 読み込んだサンプル数を加算
                // 読み込んだサンプル数を加算
                totalSamplesRead += readResult
            } else if (readResult == 0) {
                // データがまだない場合、少し待機 (ビジーループ回避)
                delay(10) // 10ミリ秒待つ
            } else {
                // エラー発生 (readResult < 0)
                // AudioRecord.ERROR_INVALID_OPERATION, ERROR_BAD_VALUE, ERROR_DEAD_OBJECT, ERROR
                Log.e(TAG, "recordAudio: AudioRecord.readエラー: $readResult")
                break // ループを抜ける
            }
        }
        Log.d(TAG, "recordAudio: 録音ループ終了 totalSamplesRead=$totalSamplesRead")

        // 録音停止
        // audioRecord.recordingState == AudioRecord.RECORDSTATE_STOPPED であることを確認
        audioRecord.stop()
        Log.d(TAG, "recordAudio: 録音停止")

        // 実際に読み込んだデータだけを返す（目標より少ない場合もある）
        return@withContext if (totalSamplesRead > 0) {
            audioData.copyOf(totalSamplesRead) // 読み込んだ分だけコピーして返す
        } else {
            Log.w(TAG, "recordAudio: サンプルが全く読み込めませんでした")
            null // 読み込めなかった場合はnull
        }

    } catch (e: SecurityException) {
        // RECORD_AUDIO パーミッションがない場合に発生する可能性がある
        Log.e(TAG, "recordAudio: パーミッションエラー: ${e.message}", e)
        return@withContext null
    } catch (e: IllegalStateException) {
        // AudioRecordが適切な状態でない場合 (例: 初期化失敗、すでにrelease済み)
        Log.e(TAG, "recordAudio: AudioRecord状態エラー: ${e.message}", e)
        return@withContext null
    } catch (e: Exception) {
        // その他の予期せぬエラー
        Log.e(TAG, "recordAudio: 録音中に予期せぬエラー: ${e.message}", e)
        return@withContext null
    } finally {
        // AudioRecordリソースを確実に解放
        // audioRecord?.state == AudioRecord.STATE_INITIALIZED の場合のみ release() を呼ぶのがより安全
        audioRecord?.release()
        Log.d(TAG, "recordAudio: AudioRecord解放")
    }
}

/**
 * 指定された周期と振幅を持つインパルス列を生成する関数。
 * @param length 生成する配列の長さ (FFTサイズに合わせる)。
 * @return 生成されたインパルス列 (FloatArray)。
 */
private fun generateImpulseTrain(length: Int): FloatArray {
    Log.d(TAG, "generateImpulseTrain: 開始 length=$length, period=$IMPULSE_PERIOD")
    // 指定された長さのFloatArrayを生成し、0.0fで初期化
    val impulseTrain = FloatArray(length)
    // 配列のインデックスが周期(IMPULSE_PERIOD)の倍数となる位置に振幅を設定
    // i = 0, IMPULSE_PERIOD, 2*IMPULSE_PERIOD, ...
    for (i in 0 until length step IMPULSE_PERIOD) {
        impulseTrain[i] = IMPULSE_AMPLITUDE
    }
    Log.d(TAG, "generateImpulseTrain: 完了")
    return impulseTrain
}

/**
 * 指定された周期と振幅を持つインパルス列を生成する関数 (ShortArray版)。
 * テストモードで使用します。
 * @param length 生成する配列の長さ (FFTサイズに合わせる)。
 * @return 生成されたインパルス列 (ShortArray)。
 */
private fun generateImpulseTrainShort(length: Int): ShortArray {
    // Logcatに出力して、関数が呼ばれたことを確認
    Log.d(TAG, "generateImpulseTrainShort: 開始 length=$length, period=$IMPULSE_PERIOD")
    // 指定された長さで ShortArray を作成 (要素はデフォルトで 0)
    val impulseTrain = ShortArray(length)
    // 定数で定義された Float の振幅 (IMPULSE_AMPLITUDE) を Short 型に変換します。
    // 安全のため Int を経由し、Short 型の最小値/最大値の範囲内に収まるように coerceIn を使います。
    // (今回の振幅 16384 は Short の範囲内なので、coerceIn は実質的に影響しませんが、安全策です)
    val amplitudeShort = IMPULSE_AMPLITUDE.toInt().coerceIn(Short.MIN_VALUE.toInt(), Short.MAX_VALUE.toInt()).toShort()
    // 変換後の Short 値をログに出力して確認
    Log.d(TAG, "generateImpulseTrainShort: amplitudeShort=$amplitudeShort")

    // 配列のインデックスが周期(IMPULSE_PERIOD)の倍数となる位置に振幅を設定します。
    // 例: i = 0, 1023, 2046, ...
    // 'step' を使って、周期ごとにインデックスを増やしながらループします。
    for (i in 0 until length step IMPULSE_PERIOD) {
        // 配列のインデックスが範囲内にあるか一応確認します (ほぼ不要ですが念のため)。
        if (i < impulseTrain.size) {
            // 配列の該当する位置に、計算した Short 型の振幅値を設定します。
            impulseTrain[i] = amplitudeShort
        }
    }
    // 完了ログを出力
    Log.d(TAG, "generateImpulseTrainShort: 完了")
    // 生成した ShortArray (インパルス列データ) を関数の結果として返します。
    return impulseTrain
}

// --- 正規化関数の変更 ---04181647追加
/**
 * 相互相関結果を送信インパルス振幅で正規化する関数。
 * @param correlationData 相互相関の結果 (FloatArray)。
 * @return 正規化された相互相関結果 (FloatArray)。結果は +/- 1.0 を超える可能性あり。
 */
//private fun normalizeCorrelationByAmplitude(correlationData: FloatArray): FloatArray {
//    Log.d(TAG, "normalizeCorrelationByAmplitude: 開始 data.size=${correlationData.size}")
//    if (correlationData.isEmpty() || IMPULSE_AMPLITUDE == 0.0f) {
//        Log.w(TAG, "normalizeCorrelationByAmplitude: データが空か、振幅がゼロです")
//        return FloatArray(correlationData.size)
//    }
//    val normalizedData = FloatArray(correlationData.size) { i ->
//        correlationData[i] / IMPULSE_AMPLITUDE
//    }
//    Log.d(TAG, "normalizeCorrelationByAmplitude: 完了")
//    return normalizedData
//}

/**
 * FFTを使用して2つの信号間の相互相関を計算する関数。
 * 相互相関 Rxy[m] = IFFT( FFT(x[n]) * FFT(y[-n])^* ) を計算する。
 * ここでは y[-n] の代わりに y[n] を使い、FFT(y[n]) の共役を取ることで同等の結果を得る。
 * @param signal1 1つ目の信号 (ShortArray、例: 録音データ)。
 * @param signal2 2つ目の信号 (FloatArray、例: インパルス列)。FFTサイズに合わせられている前提。
 * @return 相互相関結果 (FloatArray)、計算失敗時はnull。
 */
private suspend fun calculateCrossCorrelationFFT(signal1: ShortArray, signal2: FloatArray): FloatArray? = withContext(Dispatchers.Default) { // 計算量の多い処理はDefaultディスパッチャで
    Log.d(TAG, "calculateCrossCorrelationFFT: 開始 signal1.size=${signal1.size}, signal2.size=${signal2.size}, FFT_SIZE=$FFT_SIZE")
    // --- 入力チェック ---
    if (signal1.isEmpty() || signal2.isEmpty()) {
        Log.e(TAG, "calculateCrossCorrelationFFT: 入力信号が空です")
        return@withContext null
    }
    // signal2の長さがFFTサイズと一致するか確認 (前提条件)
    if (signal2.size != FFT_SIZE) {
        Log.e(TAG, "calculateCrossCorrelationFFT: signal2の長さ(${signal2.size})がFFT_SIZE(${FFT_SIZE})と異なります。")
        return@withContext null
    }
    // FFTサイズがsignal1の長さ以上か確認 (ゼロパディングのため)
    if (FFT_SIZE < signal1.size) {
        Log.e(TAG, "calculateCrossCorrelationFFT: FFT_SIZE(${FFT_SIZE}) が signal1 の長さ(${signal1.size}) より小さいです。相互相関計算には通常もっと大きいサイズが必要です。")
        // 相互相関では N >= L+M-1 の長さが必要 (L=signal1長, M=signal2長)
        return@withContext null
    }

    try {
        // --- FFT準備 ---
        // JTransforms用のFFTインスタンスを作成 (FFTサイズを指定)
        val fft = FloatFFT_1D(FFT_SIZE.toLong()) // ★★★ JTransformsのクラス ★★★

        // --- signal1のFFT ---
        // ShortArrayからFloatArrayに変換し、FFTサイズに合わせてゼロパディング
        val fftData1 = FloatArray(FFT_SIZE) { i ->
            if (i < signal1.size) signal1[i].toFloat() else 0.0f
        }
        Log.d(TAG, "calculateCrossCorrelationFFT: signal1 FFT実行")
        fft.realForward(fftData1) // in-place FFT: fftData1の内容がFFT結果で上書きされる

        // --- signal2のFFT ---
        // signal2 は既に FloatArray で FFTサイズなのでコピーして使用
        val fftData2 = signal2.copyOf() // realForwardはin-placeなので元データを壊さないようにコピー
        Log.d(TAG, "calculateCrossCorrelationFFT: signal2 FFT実行")
        fft.realForward(fftData2) // in-place FFT

        // --- signal2 FFT結果の複素共役計算 ---
        Log.d(TAG, "calculateCrossCorrelationFFT: signal2 FFT結果の複素共役計算")
        // JTransformsのrealForwardの結果形式: [Re(0), Re(N/2), Re(1), Im(1), ..., Re(N/2-1), Im(N/2-1)]
        // 複素共役は虚部の符号を反転させる
        for (k in 1 until FFT_SIZE / 2) {
            // Im(k) は インデックス 2*k + 1 に格納されている
            fftData2[2 * k + 1] = -fftData2[2 * k + 1]
        }
        // DC成分 (インデックス0) とナイキスト周波数成分 (インデックス1) は実数なので操作不要

        // --- 周波数領域での乗算: R[k] = FFT(signal1)[k] * FFT(signal2)^*[k] ---
        Log.d(TAG, "calculateCrossCorrelationFFT: 周波数領域での複素数乗算")
        val correlationSpectrum = FloatArray(FFT_SIZE) // 乗算結果を格納する配列
        // DC成分 (k=0): 実数同士の乗算
        correlationSpectrum[0] = fftData1[0] * fftData2[0]
        // ナイキスト周波数成分 (k=N/2): 実数同士の乗算
        correlationSpectrum[1] = fftData1[1] * fftData2[1]
        // その他の周波数成分 (k = 1 から N/2 - 1)
        for (k in 1 until FFT_SIZE / 2) {
            val idxReal = 2 * k       // 実部のインデックス
            val idxImag = 2 * k + 1   // 虚部のインデックス

            val x_re = fftData1[idxReal]    // signal1の実部 Re(Xk)
            val x_im = fftData1[idxImag]    // signal1の虚部 Im(Xk)
            val y_conj_re = fftData2[idxReal] // signal2共役の実部 Re(Yk*)
            val y_conj_im = fftData2[idxImag] // signal2共役の虚部 Im(Yk*)

            // 複素数乗算: (a + ib) * (c + id) = (ac - bd) + i(ad + bc)
            // ここでは Yk* なので d は既に -Im(Yk) となっていることに注意 (計算はそのまま)
            correlationSpectrum[idxReal] = x_re * y_conj_re - x_im * y_conj_im       // 結果の実部
            correlationSpectrum[idxImag] = x_re * y_conj_im + x_im * y_conj_re       // 結果の虚部
        }

        // --- 逆FFT: correlation = IFFT(correlationSpectrum) ---
        Log.d(TAG, "calculateCrossCorrelationFFT: 逆FFT実行")
        // realInverseもin-placeなので、correlationSpectrumが逆FFT結果で上書きされる
        // 第2引数 `true` は、FFT->IFFTで元のスケールに戻すための 1/N スケーリングを有効にすることを意味する
        fft.realInverse(correlationSpectrum, true)

        Log.d(TAG, "calculateCrossCorrelationFFT: 完了")
        // correlationSpectrum 配列に時間領域の相互相関の結果が格納されている
        return@withContext correlationSpectrum

    } catch (e: OutOfMemoryError) {
        // FFTサイズが大きい場合に発生する可能性
        Log.e(TAG, "calculateCrossCorrelationFFT: メモリ不足エラー。FFT_SIZEが大きすぎる可能性があります。", e)
        return@withContext null
    } catch (e: Exception) {
        // その他の予期せぬエラー (JTransforms内部エラーなど)
        Log.e(TAG, "calculateCrossCorrelationFFT: FFT/IFFT 計算中にエラー: ${e.message}", e)
        return@withContext null // エラー発生時はnullを返す
    }
}

/**
 * 相互相関結果を正規化する関数 (絶対値の最大値で割る)。
 * @param correlationData 相互相関の結果 (FloatArray)。
 * @return 正規化された相互相関結果 (FloatArray)。
 */
private fun normalizeCorrelation(correlationData: FloatArray): FloatArray {
    Log.d(TAG, "normalizeCorrelation: 開始 data.size=${correlationData.size}")
    if (correlationData.isEmpty()) {
        Log.w(TAG, "normalizeCorrelation: データが空です")
        return FloatArray(0) // 空の場合は空で返す
    }

    // --- 最大絶対値の計算 ---
    // スレッドセーフではないが、今回の用途では問題ない
    var maxAbsValue = 0.0f
    // forEachより传统的forループの方が若干速い可能性がある
    for (i in correlationData.indices) {
        val absVal = abs(correlationData[i])
        if (absVal > maxAbsValue) {
            maxAbsValue = absVal
        }
    }
    // 代替: val maxAbsValue = correlationData.maxOfOrNull { abs(it) } ?: 0.0f
    Log.d(TAG, "normalizeCorrelation: maxAbsValue=$maxAbsValue")

    // --- 正規化処理 ---
    // 最大絶対値が非常に小さい（ほぼゼロ）場合はゼロ除算を避ける
    // 浮動小数点数の比較には閾値を使うのが一般的
    return if (maxAbsValue < 1e-9f) { // より小さい閾値に変更
        Log.w(TAG, "normalizeCorrelation: 最大絶対値がほぼゼロのため、正規化せずゼロ配列を返します")
        FloatArray(correlationData.size) // 全てゼロの配列を返す
    } else {
        // 各要素を最大絶対値で割って正規化 (-1.0f 〜 1.0f の範囲になる)
        // 新しい配列を作成して結果を格納
        val normalizedData = FloatArray(correlationData.size) { i ->
            correlationData[i] / maxAbsValue
        }
        Log.d(TAG, "normalizeCorrelation: 完了")
        normalizedData
    }
}

/**
 * 正規化された相互相関結果を表示用に整形する関数。
 * ピーク値とその位置（時間）を表示する。
 * @param normalizedData 正規化された相互相関データ (FloatArray)。
 * @return 表示用の文字列。
 */
private fun formatCorrelationResult(normalizedData: FloatArray): String {
    Log.d(TAG, "formatCorrelationResult: 開始 data.size=${normalizedData.size}")
    if (normalizedData.isEmpty()) {
        return "結果: データがありません。"
    }

    // --- ピーク値とそのインデックスの探索 ---
    var peakValue = 0.0f // ピークの実際の値 (正規化後)
    var peakIndex = -1   // ピークのインデックス (サンプル遅延)
    var maxAbsValue = -1.0f // 比較用の最大絶対値 (負の値で初期化)

    // 全データを走査して絶対値が最大の点を見つける
    normalizedData.forEachIndexed { index, value ->
        val absVal = abs(value)
        // より大きい絶対値が見つかったら更新
        if (absVal > maxAbsValue) {
            maxAbsValue = absVal
            peakValue = value // その時の実際の値（符号付き）を保持
            peakIndex = index
        }
    }

    // --- 結果文字列の生成 ---
    val sb = StringBuilder()
    sb.append("--- 相互相関結果 (正規化済み) ---\n")
    sb.append("データ点数: ${normalizedData.size}\n")

    // ピークが見つかった場合（peakIndexが初期値-1から更新された場合）
    if (peakIndex != -1) {
        // ピーク位置に対応する時間遅延を計算 (時間 = サンプルインデックス / サンプリングレート)
        val peakTimeMs = peakIndex.toDouble() / SAMPLE_RATE * 1000.0 // ミリ秒に変換
        Log.d(TAG, "formatCorrelationResult: Peak found at index=$peakIndex, value=$peakValue, time=${peakTimeMs}ms")

        sb.append("ピーク値: %.4f\n".format(peakValue)) // 小数点以下4桁で表示
        sb.append("ピーク位置 (サンプル遅延): $peakIndex\n")
        sb.append("ピーク位置 (時間): %.2f ms\n".format(peakTimeMs)) // 小数点以下2桁で表示
    } else {
        // ピークが見つからなかった場合（データが全てゼロなど）
        Log.w(TAG, "formatCorrelationResult: ピークが見つかりませんでした。")
        sb.append("明確なピークは見つかりませんでした。\n")
    }
    sb.append("---------------------------------\n")

    // オプション: 全データの一部を簡易表示 (デバッグ用、必要ならコメント解除)
    /*
    sb.append("データサンプル (最初の50点と最後の50点):\n")
    normalizedData.take(50).forEachIndexed { index, value ->
        sb.append("%d: %.4f\n".format(index, value))
    }
    if (normalizedData.size > 100) {
        sb.append("...\n")
        normalizedData.takeLast(50).forEachIndexed { index, value ->
             sb.append("%d: %.4f\n".format(normalizedData.size - 50 + index, value))
        }
    } else if (normalizedData.size > 50) {
         normalizedData.drop(50).forEachIndexed { index, value ->
             sb.append("%d: %.4f\n".format(50 + index, value))
        }
    }
    */

    Log.d(TAG, "formatCorrelationResult: 完了")
    return sb.toString()
}
